## CLONANDO UM REPOSITÓRIO:
    - PARA CLONAR UM REPOSITÓRIO GIT DE ALGUÉM PARA O SEU REPOSITÓRIO,
    - PODEMOS USAR O COMANDO:
        - git clone "url do repositório a ser clonado."


## REALIZANDO UM COMMIT:

    # O COMANDO GIT STATUS:
        - UTILIZADO PARA EXIBIR UM RELATÓRIO SOBRE OS ARQUIVOS ALTERADOS.

        - EXEMPLO:
            - PS C:\Users\User\Documents\Numero-Secreto> git status

    # O COMANDO GIT ADD:
        - USADO PARA ADICIONAR UM ARQUIVO ESPECÍFICO AO REPOSITÓRIO LOCAL.
        - COMANDO: git add "nome do arquivo"

        - NESSE EXEMPLO PRÁTICO IRÁ ADICIONAR TODOS OS ARQUIVOS DE UM PROJETO
        AO REPOSITÓRIO LOCAL.
        - NESSE CASO USAREMOS O COMANDO:
            git add .

        EXEMPLO NA PRÁTICA :
        PS C:\Users\User\Documents\Numero-Secreto> git add .


    # REGISTRANDO AS MUDANÇAS NO REPOSITÓRIO:
        - PARA REGISTRAR ALTERAÇÕES NO REPOSITÓRIO, USAREMOS O COMANDO GIT COMMIT:
            - COMANDO UTILIZADO:
                git commit -m "Alterando limite para 100"

        # EXEMPLO NA PRÁTICA:
            - PS C:\Users\User\Documents\Numero-Secreto> git commit -m "Alterado limite para 100"



    # LISTANDO HISTÓRICO DE COMMITS DE UM REPOSITÓRIO:
        - PARA LISTAR HISTÓRICO DE COMMINTS DE UM REPOSITÓRIO, USAREMOS O COMANDO:
                git log


        # EXEMPLO NA PRÁTICA:
            - PS C:\Users\User\Documents\Numero-Secreto> git log

#   OBS:
    - Quando estamos trabalhando em um projeto utilizando o versionamento Git
     e a IDE VSCode, ao adicionar ou alterar algum arquivo aparece uma sinalização
     ao lado do nome desses arquivos no VSCode.


    SIGNIFICADO DAS SINALIZAÇÕES:

        - M:
            - A letra M representa o estado Modified, do português modificado.
            - Isso significa que o arquivo já existia no repositório, mas que 
            recebeu alguma modificação que ainda não foi registrada no Git. 

        - U:
            - A letra U representa o estado Untracked, do português não rastreado.
            - Isso significa que o arquivo ainda não existia no repositório e que
            ainda não teve seu registro (commit) feito no Git.      



# REGRAS DAS MENSAGENS DE COMMIT:
    - PRECISA-SE UTILIZAR DE BOAS PRÁTICAS PARA A ESCRITA DE MENSAGENS DE COMMIT;

    - ESSAS BOAS PRÁTICAS GARANTE QUE OUTRAS PESSOAS, OU ATÉ MESMO NOS NO FUTURO,
    ENTENDA QUE ALTERAÇÕES FORAM FEITAS E POR QUÊ.

    - AS MENSAGENS DE COMMIT DEVEM SER CLARAS E OBJETIVAS.

    
    # ALGUMAS DICAS E ORIENTAÇÕES PARA ISSO:

        - MANTENHA A MENSAGEM CURTA E CONCISA:
            - A primeira linha da mensagem deve conter, no máximo, 72 caracteres.
            - Caso seja necessário uma descrição adicional, você deve pular uma 
            linha e adicionar os detalhes, como o contexto, da mudança realizada.

        - USO DE VERBO INFINITIVO:
            - É comum que a mensagem do commit inicie com um verbo no infinitivo
            que descreva a alteração feita, como “adicionar”, “corrigir” ou
            “atualizar”.
            - Em sequência, são adicionados detalhes concisos da mudança.
            - Por exemplo: “Atualizar texto do título da página”. 

        - EVITE DETALHES TÉCNICOS:
            - Não inclua detalhes técnicos complexos na mensagem de commit. 
            -Esses detalhes podem ser adicionados nos comentários de código ou
            na documentação. 

    OBS:
        - É importante ter em mente que a mensagem do commit é uma forma de 
        documentação do histórico das mudanças que ocorreram ao longo do código.
        - A pessoa que ler essa mensagem pode não ter conhecimento do contexto 
        original.
        - Assim, garanta que suas mensagens de commit tenham clareza e sejam 
        suficientemente descritivas. 

    # QUANDO REALIZAR UM COMMIT:
        - deve ser realizado sempre que você finalizar uma tarefa específica ou 
        resolver algum bug.
        - Isso mantém o histórico de commits claro e rastreável, de modo que seja 
        possível entender o que foi feito em cada commit.

        - É importante realizar commits frequentemente.
        - Porém, evite realizar commits muito pequenos ou muito grandes, pois isso
        pode tornar difícil o seu entendimento.

    OBS: 
        - Nunca realizar um commit de um código que você sabe que contém bugs.
        - O ideal é que o commit contenha somente código funcional. 


    # COMO O GIT CONTROLA AS MUDANÇAS:

        - É feito através de COMMITS;
        - Cada commit armazena o ESTADO COMPLETO do projeto de um determinado momento
        por meio de um SNAPSHOT.
        - Ou seja, cada commit é um registro completo do repositório no momento em que 
        esse commit foi criado.        

        - Como cada commit é uma representação completa e consistente do estado do 
        projeto em um determinado ponto no tempo, isso facilita a rastreabilidade e
        o entendimento de como se deu a evolução do código ao longo do tempo.

        - Todo commit conta com um id único e traz uma referência aos commits anteriores.
        - Assim, através dessa cadeia de commits, o Git registra um histórico completo de
        todos os commits realizados no repositório.


# ENVIANDO COMMITS:

        - PARA LISTAR OS REPOSITÓRIOS REMOTOS, PDEMOS USAR O COMANDO:
            git remote

        EXEMPLO NA PRÁTICA:
            PS C:\Users\User\Documents\Numero-Secreto> git remote


        - PARA ENVIAR OS COMMITS DO REPOSITÓRIO LOCAL AO REPOSITÓRIO REMOTO NO GITHUB,
         PODEMOS USAR O COMANDO:
                - git push 

        EXEMPLO NA PRATICA:
            PS C:\Users\User\Documents\Numero-Secreto> git push origin main


# ADICIONADO COLABORADORES AO SEU PROJETO:
    - PRECISAMOS ADICIONAR MANUALMENTE;
        - NAS CONFIGURAÇOES DE COLABORADORES NO GITHUB;


# ADICIONADO MAIS DE UM AUTOR A UM COMMIT:
    - PARA ADICIONAR MAIS DE UM AUTOR A UM COMMIT, DEVEMOS PULAR DUAS LINHAS E USAMOS 
    A PALAVRA-CHAVE Co-authored-by: SEGUIDO DO NOME E E-MAIL AO GITHUB (ENTRE <>) DE CADA 
    PESSOA COLABORADORA.

    EXEMPLO NA PRÁTICA:
         - $ git commit -m "Adicionar nova funcionalidade.
>
>
Co-authored-by: NOME <nome@email.com>
Co-authored-by: OUTRO-NOME <outro@email.com>"


# OUTRAS FORMAS DE COLABORAR: 
    - Existem diversos projetos de software com seu código fonte disponível 
    no GitHub e abertos para colaboração de qualquer um que queira contribuir. 
    - Esse modelo de desenvolvimento é chamado de Open Source ou Código Aberto.



# BAIXANDO NOVOS COMMITS:
    - PARA BAIXAR OS COMMITS DO REPOSITÓRIO REMOTO PARA O REPOSITÓRIO LOCAL,
    - PODEMOS UTILIZAR O COMANDO:
        git pull origin main 



# GIT NO VSCODE:
    












# RESUMOS DOS COMANDOS DA AULA:
git status -> verificar quais arquivos foram modificados;

git add -> adicionar mudanças;

git commit -> registrar as mudanças no repositório;

git push -> subir as mudanças para o repositório remoto;

git pull -> baixar as mudanças para o repositório local.


   

